openapi: 3.0.0
info:
  title: Tramways API
  description: Tramways API
  version: 1.0.0
servers:
  - url: http://localhost:8080/tramways/rest

paths:
  /users:
    get:
      operationId: 'getUsers'
      summary: 'Gets all users'
      tags: ['users']
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: 'createUser'
      summary: 'Creates a new user'
      tags: ['users']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/login:
    post:
      summary: 'Logs a user in'
      operationId: 'login'
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
  /users/{id}:
    get:
      operationId: 'getUser'
      summary: 'Gets a user'
      tags: ['users']
      parameters:
        - in: path
          name: 'id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: 'deleteUser'
      summary: 'Deletes a user'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /users/{id}/roles:
    put:
      operationId: 'editRoles'
      summary: 'Edit user''s roles'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: OK
  /users/{id}/enable:
    put:
      operationId: 'enableUser'
      summary: 'Enable or disable a user'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BooleanWrapper'
      responses:
        '200':
          description: Ok
  /users/{id}/reset:
    put:
      operationId: 'resetUser'
      summary: 'Reset user''s password'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringWrapper'
      responses:
        '200':
          description: OK
  /projects:
    post:
      summary: 'Creates a new project'
      tags: ['projects']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: Ok
    get:
      summary: 'Gets user projects'
      tags: ['projects']
      parameters:
        - in: query
          name: 'user'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
        roadmap:
          type: string
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            username:
              type: string
            roles:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum: [CLIENT, EXPERT, ADMIN]
    Project:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            name:
              type: string
            ownerURI:
              type: string
    Resource:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
    Action:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        uri:
          type: string
        method:
          $ref: '#/components/schemas/ActionMethod'
    BooleanWrapper:
      type: object
      properties:
        value:
          type: boolean
    StringWrapper:
      type: object
      properties:
        value:
          type: string
    ActionMethod:
      type: string
      enum: [GET, PUT, POST, DELETE]
    Error:
      type: object
      properties:
        message:
          type: string
  responses:
    Created:
      description: 'Resource created'
      headers:
        Location:
          schema:
            type: string
    Ok:
      description: 'Request successful'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StringWrapper'
    Unauthorized:
      description: 'You are not authorized'


security:
  - bearerAuth: []
