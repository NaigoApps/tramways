// tslint:disable
/**
 * Tramways API
 * Tramways API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined } from '../runtime';
import {
    CreateProjectRequest,
} from '../models';

export interface ProjectsGetRequest {
    user: string;
}

export interface ProjectsPostRequest {
    createProjectRequest?: CreateProjectRequest;
}

/**
 * no description
 */
export class ProjectsApi extends BaseAPI {

    /**
     * Gets user projects
     */
    projectsGet = ({ user }: ProjectsGetRequest): Observable<void> => {
        throwIfNullOrUndefined(user, 'projectsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'user': user,
        };

        return this.request<void>({
            path: '/projects',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * Creates a new project
     */
    projectsPost = ({ createProjectRequest }: ProjectsPostRequest): Observable<void> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/projects',
            method: 'POST',
            headers,
            body: createProjectRequest,
        });
    };

}
