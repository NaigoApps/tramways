// tslint:disable
/**
 * Tramways API
 * Tramways API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    BooleanWrapper,
    StringWrapper,
    User,
    UserRequest,
    UserRole,
} from '../models';

export interface CreateUserRequest {
    userRequest?: UserRequest;
}

export interface DeleteUserRequest {
    id: string;
}

export interface EditRolesRequest {
    id: string;
    userRole?: Array<UserRole>;
}

export interface EnableUserRequest {
    id: string;
    booleanWrapper?: BooleanWrapper;
}

export interface GetUserRequest {
    id: string;
}

export interface ResetUserRequest {
    id: string;
    stringWrapper?: StringWrapper;
}

/**
 * no description
 */
export class UsersApi extends BaseAPI {

    /**
     * Creates a new user
     */
    createUser = ({ userRequest }: CreateUserRequest): Observable<User> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            path: '/users',
            method: 'POST',
            headers,
            body: userRequest,
        });
    };

    /**
     * Deletes a user
     */
    deleteUser = ({ id }: DeleteUserRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'deleteUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'DELETE',
            headers,
        });
    };

    /**
     * Edit user\'s roles
     */
    editRoles = ({ id, userRole }: EditRolesRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'editRoles');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/users/{id}/roles'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: userRole,
        });
    };

    /**
     * Enable or disable a user
     */
    enableUser = ({ id, booleanWrapper }: EnableUserRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'enableUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/users/{id}/enable'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: booleanWrapper,
        });
    };

    /**
     * Gets a user
     */
    getUser = ({ id }: GetUserRequest): Observable<User> => {
        throwIfNullOrUndefined(id, 'getUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            path: '/users/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
            headers,
        });
    };

    /**
     * Gets all users
     */
    getUsers = (): Observable<Array<User>> => {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<User>>({
            path: '/users',
            method: 'GET',
            headers,
        });
    };

    /**
     * Reset user\'s password
     */
    resetUser = ({ id, stringWrapper }: ResetUserRequest): Observable<void> => {
        throwIfNullOrUndefined(id, 'resetUser');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            path: '/users/{id}/reset'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: stringWrapper,
        });
    };

}
