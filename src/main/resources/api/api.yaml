openapi: 3.0.0
info:
  title: Tramways API
  description: Tramways API
  version: 1.0.0
servers:
  - url: http://localhost:8080/tramways/rest

paths:
# # # # # # #
# USERS
# # # # # # #
  /users:
    get:
      operationId: 'getUsers'
      summary: 'Gets all users'
      tags: ['users']
      responses:
        '200':
          description: 'List of users'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: 'createUser'
      summary: 'Creates a new user'
      tags: ['users']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/login:
    post:
      summary: 'Logs a user in'
      operationId: 'login'
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
  /users/logged:
    get:
      summary: 'Gets logged user'
      operationId: 'logged'
      responses:
        '200':
          description: 'Ok'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: 'getUser'
      summary: 'Gets a user'
      tags: ['users']
      parameters:
        - in: path
          name: 'id'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'User'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: 'User not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorWrapper'
    delete:
      operationId: 'deleteUser'
      summary: 'Deletes a user'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /users/{id}/roles:
    put:
      operationId: 'editRoles'
      summary: 'Edit user''s roles'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
      responses:
        '200':
          description: OK
  /users/{id}/password:
    put:
      operationId: 'editPassword'
      summary: 'Edit user''s password'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: OK
  /users/{id}/enable:
    put:
      operationId: 'enableUser'
      summary: 'Enable or disable a user'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BooleanWrapper'
      responses:
        '200':
          description: Ok
  /users/{id}/reset:
    put:
      operationId: 'resetUser'
      summary: 'Reset user''s password'
      tags: ['users']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringWrapper'
      responses:
        '200':
          description: OK
# # # # # # #
# PROJECTS
# # # # # # #
  /projects:
    post:
      operationId: 'createProject'
      summary: 'Creates a new project'
      tags: ['projects']
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '200':
          description: Ok
    get:
      operationId: 'getProjects'
      summary: 'Gets user projects'
      tags: ['projects']
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDescription'

  /projects/{id}:
    get:
      summary: 'Gets project'
      operationId: 'getProject'
      tags: ['projects']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      summary: 'Updates a project'
      operationId: 'updateProject'
      tags: ['projects']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: Ok
    delete:
      summary: 'Deletes a project'
      operationId: 'deleteProject'
      tags: ['projects']
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
  /projects/{projectId}/maps:
    post:
      summary: 'Creates a map'
      operationId: 'createMap'
      tags: ['projects']
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMapRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadMap'
  /projects/{projectId}/maps/{mapId}:
    get:
      summary: 'Gets a map'
      operationId: 'getMap'
      tags: ['projects']
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: mapId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoadMap'
    put:
      summary: 'Updates a map'
      operationId: 'updateMap'
      tags: ['projects']
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: mapId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMapRequest'
      responses:
        '200':
          description: Ok
    delete:
      summary: 'Deletes a map'
      operationId: 'deleteMap'
      tags: ['projects']
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: mapId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Ok
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
    CreateMapRequest:
      type: object
      properties:
        name:
          type: string
        map:
          $ref: '#/components/schemas/RoadMap'
    UpdateMapRequest:
      type: object
      properties:
        map:
          $ref: '#/components/schemas/RoadMap'
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
      required: [roles]
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    ChangePasswordRequest:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    User:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            username:
              type: string
            roles:
              type: array
              items:
                $ref: '#/components/schemas/UserRole'
          required: [username, roles]
    UserRole:
      type: string
      enum: [CLIENT, EXPERT, ADMIN]
    ProjectDescription:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            name:
              type: string
            roadMaps:
              type: array
              items:
                $ref: '#/components/schemas/RoadMapDescription'
    Project:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            name:
              type: string
            roadMaps:
              type: array
              items:
                $ref: '#/components/schemas/RoadMap'
    RoadMapDescription:
      type: object
      properties:
        name:
          type: string
    RoadMap:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          properties:
            name:
              type: string
            points:
              type: array
              items:
                $ref: '#/components/schemas/RelevantPoint'
            lanes:
              type: array
              items:
                $ref: '#/components/schemas/Lane'
            links:
              type: array
              items:
                $ref: '#/components/schemas/CrossingLink'
    RelevantPoint:
      allOf:
        - $ref: '#/components/schemas/Configurable'
    Lane:
      allOf:
        - $ref: '#/components/schemas/Configurable'
        - type: object
          properties:
            sourceId:
              type: string
            destinationId:
              type: string
    CrossingLink:
      allOf:
        - $ref: '#/components/schemas/Configurable'
        - type: object
          properties:
            sourceId:
              type: string
            destinationId:
              type: string
    Configurable:
      type: object
      properties:
        id:
          type: string
        props:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    IntegerProperty:
      allOf:
        - $ref: '#/components/schemas/Property'
        - type: object
          properties:
            value:
              type: integer
    StringProperty:
      allOf:
        - $ref: '#/components/schemas/Property'
        - type: object
          properties:
            value:
              type: string
    DecimalProperty:
      allOf:
        - $ref: '#/components/schemas/Property'
        - type: object
          properties:
            value:
              type: number
    DistributionProperty:
      allOf:
        - $ref: '#/components/schemas/Property'
        - type: object
          properties:
            value:
              $ref: '#/components/schemas/Distribution'
    Distribution:
      type: object
      discriminator:
        propertyName: distributionType
      properties:
        distributionType:
          $ref: '#/components/schemas/DistributionType'
      required: [distributionType]
    DistributionType:
      type: string
      enum: [UNIFORM, EXPONENTIAL]
    UniformDistribution:
      allOf:
        - $ref: '#/components/schemas/Distribution'
        - type: object
          properties:
            left:
              type: number
            right:
              type: number
    ExponentialDistribution:
      allOf:
        - $ref: '#/components/schemas/Distribution'
        - type: object
          properties:
            lambda:
              type: number
    Property:
      type: object
      discriminator:
        propertyName: propertyType
      properties:
        name:
          type: string
        propertyType:
          $ref: '#/components/schemas/PropertyType'
      required: [propertyType]
    PropertyType:
      type: string
      enum: [INTEGER, STRING, DECIMAL, DISTRIBUTION]
    Resource:
      type: object
      properties:
        uuid:
          type: string
    BooleanWrapper:
      type: object
      properties:
        value:
          type: boolean
    StringWrapper:
      type: object
      properties:
        value:
          type: string
    ErrorWrapper:
      type: object
      properties:
        message:
          type: string
  responses:
    Created:
      description: 'Resource created'
      headers:
        Location:
          schema:
            type: string
    Ok:
      description: 'Request successful'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StringWrapper'
    Unauthorized:
      description: 'You are not authorized'


security:
  - bearerAuth: []
